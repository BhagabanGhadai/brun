// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @unique @default(uuid())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  role       Role       @default(user)
  is_active  Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Address    Address[]
  reviews    Reviews[]
  wishlist   Wishlist[]
  cart       Cart[]
  orders     Order[]
}

model Address {
  id           String      @id @unique @default(uuid())
  phone        String      @unique
  address1     String
  address2     String?
  city         String
  state        String
  pincode      String
  address_type AddressType @default(home)
  user         User        @relation(fields: [user_id], references: [id])
  user_id      String
  orders       Order[]
}

model ProductCategory {
  id            String               @id @unique @default(uuid())
  category_name String               @unique
  product       Product[]
  subcategory   ProductSubCategory[]
}

model ProductSubCategory {
  id               String          @id @unique @default(uuid())
  subcategory_name String          @unique
  category         ProductCategory @relation(fields: [category_id], references: [id])
  category_id      String
  product          Product[]
}

model Product {
  id             String             @id @unique @default(uuid())
  name           String
  slug           String             @unique
  stock          Int
  price          Float
  discount       Float
  colours        Json[]
  sizes          Json[]
  image          Image[]
  review         Reviews[]
  wishlist       Wishlist[]
  cart           Cart[]
  description    String
  is_published   Boolean            @default(false)
  out_of_stock   Boolean            @default(false)
  is_featured    Boolean            @default(false)
  category       ProductCategory    @relation(fields: [category_id], references: [id])
  category_id    String
  subcategory    ProductSubCategory @relation(fields: [subcategory_id], references: [id])
  subcategory_id String
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
}

model Image {
  id         String   @id @unique @default(uuid())
  image_id   String
  is_banner  Boolean  @default(false)
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  created_at DateTime @default(now())
}

model Reviews {
  id         String   @id @unique @default(uuid())
  review     String?
  rating     Int
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  created_at DateTime @default(now())
}

model Wishlist {
  id         String   @id @unique @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  created_at DateTime @default(now())
}

model Cart {
  id         String   @id @unique @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  product_id String
  product    Product  @relation(fields: [product_id], references: [id])
  quantity   Int
  price      Float
  discount   Float
  colour     String
  size       String
  created_at DateTime @default(now())
}

model Order {
  id                  String        @id @unique() @default(uuid())
  user_id             String
  user                User          @relation(fields: [user_id], references: [id])
  address_id          String
  address             Address       @relation(fields: [address_id], references: [id])
  razorpay_order_id   String
  razorpay_payment_id String
  razorpay_signature  String
  payment_time        DateTime
  products            Json[]
  status              PaymentStatus @default(pending)
  order_status        OrderStatus   @default(Initiated)
  created_at          DateTime      @default(now())
}

enum Role {
  user
  admin
}

enum AddressType {
  home
  work
  other
}

enum PaymentStatus {
  pending
  success
  failed
}

enum OrderStatus {
  Initiated
  Accepted
  Shipped
  Deliverd
  Cancelled
  Returned
}
